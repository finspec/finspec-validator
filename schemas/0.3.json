{
    "title": "A JSON Schema for FinSpec v0.3.",
    "id": "https://fixspec.com/finspec/v0.3/schema.json#",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "required": [
        "finspec",
        "info",
        "protocol",
        "isBinary",
        "datatypes",
        "messages"
    ],
    "additionalProperties": false,
    "patternProperties": {
        "^x-": {
            "$ref": "#/definitions/vendorExtension"
        }
    },
    "properties": {
        "finspec": {
            "type": "string",
            "enum": [
                "0.3"
            ],
            "description": "The FinSpec version of this document."
        },
        "protocol": {
            "type": "string",
            "enum": [
                "fix",
                "itch",
                "ouch",
                "swift",
                "proprietary"
            ],
            "description": "The protocol type described by this document."
        },
        "protocolVersion": {
            "type": "string",
            "description": "The version number of the protocol where relevant."
        },
        "isBinary": {
            "type": "boolean",
            "description": "Indicates whether protocol is text or binary."
        },
        "charset" : {
            "type": "string",
            "description": "Legal character set used for string values e.g. 'UTF8', 'ISO 8859-1', etc."
        },
        "endianness" : {
            "type": "string",
            "enum": [
                "little",
                "big"
            ],
            "description": "Default endianness of numerical types for binary/native APIs."
        },
        "datatypes" : {
            "$ref": "#/definitions/datatypes"
        },
        "info": {
            "$ref": "#/definitions/info"
        },
        "commonBlocks": {
            "$ref": "#/definitions/commonBlocks"
        },
        "messages": {
            "type": "object",
            "description": "List of messages supported by this API spec.",
            "properties" : {
                "session": {
                    "description": "Messages used for establishing, maintaining and closing API sessions.",
                    "$ref": "#/definitions/messages"
                },
                "application": {
                    "description": "Messages used for sending and receiving business objects.",
                    "$ref": "#/definitions/messages"
                }
            }
        },
        "workflows": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items" : {
                "$ref": "#/definitions/workflow"
            },
            "description": "List of workflows",
            "additionalProperties": false
        }
    },
    "definitions": {
        "info": {
            "type": "object",
            "description": "General information about the author of the API.",
            "required": [
                "version",
                "issuer",
                "title"
            ],
            "additionalProperties": false,
            "patternProperties": {
                "^x-": {
                    "$ref": "#/definitions/vendorExtension"
                }
            },
            "properties": {
                "version": {
                    "type": "string",
                    "description": "A semantic version number of the API."
                },
                "issuer": {
                    "type": "string",
                    "description": "The name of the API issuer."
                },
                "issueDate": {
                    "type": "string",
                    "description": "The issue date of the API description expressed in YYYY-MM-DD format.",
                    "pattern": "^20\\d{2}-(0\\d|1[012])-([0-2]\\d|3[01])$"
                },
                "liveDate": {
                    "type": "string",
                    "description": "The anticipated production-live date of the API description expressed in YYYY-MM-DD format.",
                    "pattern": "^20\\d{2}-(0\\d|1[012])-([0-2]\\d|3[01])$"
                },
                "title": {
                    "type": "string",
                    "description": "A unique and precise title of the API service."
                },
                "contacts": {
                    "$ref": "#/definitions/contacts"
                }
            }
        },
        "contacts": {
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "items" : {
                "$ref": "#/definitions/contact"
            },
            "description": "List of contact details for the owners of the API.",
            "additionalProperties": false
        },
        "contact": {
            "type": "object",
            "description": "Contact detail of a person or department within the API owner.",
            "required": [
                "name"
            ],
            "additionalProperties": false,
            "anyOf": [
                {"required": ["phone"]},
                {"required": ["email"]},
                {"required": ["url"]}
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The identifying name of the contact person/organization."
                },
                "phone": {
                    "type": "string",
                    "description": "The phone number (including international dialing code) for the contact."
                },
                "url": {
                    "type": "string",
                    "description": "The URL pointing to the contact information.",
                    "format": "uri"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the contact person/organization.",
                    "format": "email"
                }
            },
            "patternProperties": {
                "^x-": {
                    "$ref": "#/definitions/vendorExtension"
                }
            }
        },
        "datatypes": {
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "items" : {
                "$ref": "#/definitions/datatype"
            },
            "description": "List of datatypes used by the API.",
            "additionalProperties": false
        },
        "datatype": {
            "type": "object",
            "description": "Description of a specific datatype used by the API.",
            "required": [
                "name",
                "baseType",
                "description"
            ],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the type. e.g. int, uint8e, Price, Boolean, etc."
                },
                "baseType": {
                    "type": "string",
                    "description": "Specifies the base/raw data type of the value.",
                    "enum" : [
                        "char",
                        "integer",
                        "number",
                        "string"
                    ]
                },
                "length": {
                    "type": "integer",
                    "description": "Length of value for this type in number of bytes."
                },
                "precision": {
                    "type": "integer",
                    "description": "Precision for floating point type value."
                },
                "isUnsigned": {
                    "type": "boolean",
                    "description": "Whether numerical value is unsigned or not. Default: false"
                },
                "isBitField": {
                    "type": "boolean",
                    "description": "Whether type represents a bit field. Default: false"
                },
                "pattern": {
                    "type": "string",
                    "description": "Regular expression to describe the pattern of the value for this datatype."
                },
                "padChar": {
                    "type": "string",
                    "description": "Character used for padding."
                },
                "padSide": {
                    "type": "string",
                    "description": "Whether field value should be padded to left or right.",
                    "enum" : [
                        "left",
                        "right"
                    ]
                },
                "description": {
                    "type": "string",
                    "description": "Description/remark for this type."
                },
                "examples": {
                    "$ref": "#/definitions/examples"
                }
            },
            "patternProperties": {
                "^x-": {
                    "$ref": "#/definitions/vendorExtension"
                }
            }
        },
        "commonBlocks": {
            "type": "object",
            "additionalProperties": false,
            "properties" : {
                "header": {
                    "description": "The common message header.",
                    "$ref": "#/definitions/message"
                },
                "footer": {
                    "description": "The commom message footer.",
                    "$ref": "#/definitions/message"
                }
            }
        },
        "messages": {
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "items" : {
                "$ref": "#/definitions/message"
            },
            "description": "List of messages available via the API.",
            "additionalProperties": false
        },
        "message": {
            "type": "object",
            "description": "Description of a specific message within the API.",
            "required": [
                "name",
                "wireId",
                "description",
                "fields"
            ],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the message."
                },
                "wireId": {
                    "type": "string",
                    "description": "Wire identifier for the message (eg tag 35 in FIX)."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the purpose and use of the message."
                },
                "fields": {
                    "$ref": "#/definitions/fields"
                },
                "direction": {
                    "type": "string",
                    "description": "Indication of message flow.",
                    "enum" : [
                        "in",
                        "out",
                        "both"
                    ]
                },
                "examples" : {
                    "$ref": "#/definitions/examples"
                }
            },
            "patternProperties": {
                "^x-": {
                    "$ref": "#/definitions/vendorExtension"
                }
            }
        },
        "examples": {
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "items" : {
                "$ref": "#/definitions/example"
            },
            "description": "List of examples.",
            "additionalProperties": false
        },
        "example": {
            "type": "object",
            "description": "Single example.",
            "required": [
                "example",
                "description"
            ],
            "additionalProperties": false,
            "properties": {
                "example": {
                    "type": "string",
                    "description": "Actual example."
                },
                "description": {
                    "type": "string",
                    "description": "Description (or purpose) of the example."
                }
            },
            "patternProperties": {
                "^x-": {
                    "$ref": "#/definitions/vendorExtension"
                }
            }
        },
        "fields": {
            "type": "array",
            "items" : {
                "$ref": "#/definitions/field"
            },
            "description": "List of fields available within a message.",
            "additionalProperties": false,
            "patternProperties": {
                "^x-": {
                    "$ref": "#/definitions/vendorExtension"
                }
            }
        },
        "field": {
            "type": "object",
            "description": "Description of a specific field within a message.",
            "required": [
                "name",
                "datatype"
            ],
            "additionalProperties": false,
            "properties": {
                "offset": {
                    "type": "integer",
                    "description": "Zero-based offset of the field within the message for binary APIs."
                },
                "position": {
                    "type": "integer",
                    "description": "Zero-based position of the field within the message for text/tag-value APIs."
                },
                "wireId": {
                    "type": "string",
                    "description": "Wire identifier for the message (eg tag 35 in FIX). Either of wireId or blockId should be present."
                },
                "blockId": {
                    "type": "string",
                    "description": "Name of the block from the commonBlocks section. Either of wireId or blockId should be present."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the purpose and use of the message."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the field."
                },
                "datatype": {
                    "type" : "string",
                    "description" : "Field datatype from the list of API datatypes."
                },
                "minValue": {
                    "type": "number",
                    "description" : "Minimum permitted field value for numeric types."
                },
                "maxValue": {
                    "type": "number",
                    "description" : "Maximum permitted field value for numeric types."
                },
                "exclusiveMinValue": {
                    "type": "boolean",
                    "description" : "Whether 'minValue' value is exclusive or not."
                },
                "exclusiveMaxValue": {
                    "type": "boolean",
                    "description" : "Whether 'maxValue' value is exclusive or not."
                },
                "minLength": {
                    "type": "integer",
                    "description" : "Minimum permitted length of value for string types."
                },
                "maxLength": {
                    "type": "integer",
                    "description" : "Maximum permitted length of value for string types."
                },
                "length": {
                    "type": "integer",
                    "description" : "Field value length in number of bytes."
                },
                "values": {
                    "$ref": "#/definitions/values",
                     "description": "List of possible values for this field."
                },
                "pattern": {
                    "type": "string",
                    "description": "Regular expression to describe the pattern of the value for this field."
                },
                "alwaysRequired": {
                    "type": "boolean",
                    "description": "Boolean flag to indicate that this field is present in 100% of cases. Default: false"
                },
                "conditions": {
                    "$ref": "#/definitions/conditions",
                    "description": "Section defining field conditional requirements"
                },
                "fields": {
                    "$ref": "#/definitions/fields",
                    "description": "List of nested fields."
                }
            },
            "dependencies": {
                "exclusiveMinValue": [ "minValue" ],
                "exclusiveMaxValue": [ "maxValue" ]
            },
            "patternProperties": {
                "^x-": {
                    "$ref": "#/definitions/vendorExtension"
                }
            }
        },
        "conditions": {
          "type": "array",
          "description": "Field conditional requirements",
          "required": [
              "conditions"
          ],
          "additionalProperties": false,
          "properties": {
            "label": {
                "type": "string",
                "description": "Decription of the condition rule."
            },
            "expressionType": {
                "type": "string",
                "description": "Type of grammar used in expression field.",
                "enum": [ "jsep"]
            },
            "expression": {
                "type": "string",
                "description": "Condition expression. Below block matters if this expression evaluates to true."
            },
            "isReqd": {
                "type": "boolean",
                "description": "Field is mandatory in such conditions"
            },
            "isAbsent": {
                "type": "boolean",
                "description": "Field should not be present in such conditions"
            },
            "values": {
              "$ref": "#/definitions/values",
              "description": "valid values in conditions described above"
            }
          },
          "patternProperties": {
              "^x-": {
                  "$ref": "#/definitions/vendorExtension"
              }
          }
        },
        "values": {
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "items" : {
                "$ref": "#/definitions/value"
            },
            "description": "List of possible values for a field.",
            "additionalProperties": false
        },
        "value": {
            "type": "object",
            "description": "Description of an enumerated, valid value.",
            "required": [
                "enum",
                "description"
            ],
            "additionalProperties": false,
            "properties": {
                "enum": {
                    "oneOf": [
                        { "type": "string" },
                        { "type": "number" }
                    ],
                    "description": "Enumeration as it appears on the wire."
                },
                "description": {
                    "type": "string",
                    "description": "Human-readable sescription of the intended value."
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Whether this value should be used as default if field is not present."
                }
            },
            "patternProperties": {
                "^x-": {
                    "$ref": "#/definitions/vendorExtension"
                }
            }
        },
        "workflow": {
            "type": "object",
            "description": "Description of the specific business case modelled in the workflow.",
            "required": [
                "name",
                "description",
                "includeMessages",
                "states",
                "transitions"
            ],
            "additionalProperties": false,
            "properties": {
               "name": {
                  "type": "string",
                  "description": "Name of the workflow."
                },
               "description": {
                  "type": "string",
                  "description": "Description of the workflow described"
                },
                "includeMessages": {
                    "type": "array",
                    "minItems": 1,
                    "uniqueItems": true,
                    "items" : {
                        "$ref": "#/definitions/includeMessage"
                    },
                    "description": "List of messages included in the workflow",
                    "additionalProperties": false
                },
                "states": {
                    "type": "array",
                    "minItems": 1,
                    "uniqueItems": true,
                    "items" : {
                        "$ref": "#/definitions/state"
                    },
                    "description": "Set of states available in this workflow",
                    "additionalProperties": false
                },
                "transitions": {
                    "type": "array",
                    "minItems": 1,
                    "uniqueItems": true,
                    "items" : {
                        "$ref": "#/definitions/transition"
                    },
                    "description": "List of events that causes the workflow to transition to another state",
                    "additionalProperties": false
                }
            },
            "patternProperties": {
                "^x-": {
                    "$ref": "#/definitions/vendorExtension"
                }
            }
        },
        "includeMessage": {
            "type": "object",
            "description": "Messages linked by specific fields",
            "required": [
                "messageType"
            ],
            "additionalProperties": false,
            "properties": {
                "messageType": {
                    "description": "List of wireID included in this workflow",
                    "type": "array",
                    "minItems": 2,
                    "uniqueItems": true,
                    "items" : {
                        "type": "string"
                    }
                },
                "linkedBy": {
                    "description": "Field wireID that link message together",
                    "type": "array",
                    "minItems": 1,
                    "uniqueItems": true,
                    "items" : {
                        "type": "string"
                    }
                }
            },
            "patternProperties": {
                "^x-": {
                    "$ref": "#/definitions/vendorExtension"
                }
            }
        },
        "state": {
            "type": "object",
            "description": "Individual state composing of the workflow",
            "required": [
                "ref"
            ],
            "additionalProperties": false,
            "properties": {
                "ref": {
                   "type": "string",
                   "description": "Unique reference of the state"
                },
                "name": {
                    "type": "string",
                    "description": "Short description of the state"
                },
                "description": {
                    "type": "string",
                    "description": "Human-readable description of the state."
                },
                "isInitial": {
                    "type": "boolean",
                    "description": "This is the initial state of the workflow."
                },
                "isFinal": {
                    "type": "boolean",
                    "description": "This is the final state of the workflow."
                }
            },
            "patternProperties": {
                "^x-": {
                    "$ref": "#/definitions/vendorExtension"
                }
            }
        },
        "transition": {
            "type": "object",
            "description": "details of the transition phase with triggering action and end state",
            "required": [
                "start",
                "responses"
              ],
            "additionalProperties": false,
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Human-readable description of the state."
                },
                "start": {
					             "type": "array",
                       "minItems": 1,
                       "uniqueItems": true,
                       "items" : {
							              "type": "string"
					                     }
				        },
                "triggerBy": {
					             "ref": "#/definitions/triggerBy",
                       "description": "Event that triggers the transition"
				        },
                "responses": {
					             "type": "array",
                       "minItems": 1,
                       "uniqueItems": true,
                       "items" : {
							              "ref": "#/definitions/response"
					              }
				        }
            },
            "patternProperties": {
                "^x-": {
                    "$ref": "#/definitions/vendorExtension"
                }
            }
        },
        "triggerBy": {
 			      "type": "object",
            "description": "Event that triggers the transition",
            "required": [
 						       "messageWireId",
                   "expressionType",
                   "expression"
 					           ],
            "additionalProperties": false,
            "properties": {
               "messageWireId": {
                    "type": "string",
                    "description": "message type ID that triggers the transition"
                },
                "expressionType": {
                    "type": "string",
                    "description": "Type of grammar used in expression field.",
                    "enum": ["jsep"]
                },
                "expression": {
                  "type": "string",
                  "description": "Condition expression. Below block matters if this expression evaluates to true."
                }
           },
           "patternProperties": {
 							"^x-": {
 							"$ref": "#/definitions/vendorExtension"
 					      }
 			     }
 		    },
        "response": {
 			      "type": "object",
            "description": "Possible message response",
            "required": [
 					        "messageWireId",
                  "end"
 			      ],
            "additionalProperties": false,
            "properties": {
 					        "messageWireId": {
 					              "type": "string",
                         "description": "Unique reference of the message that trigger the event"
 					                 },
                  "direction": {
                        "type": "string",
                        "description": "Indication of message flow.",
                        "enum" : [
                            "in",
                            "out"
                        ]
                  },
                  "where": {
                      "type": "array",
                      "minItems": 1,
                      "uniqueItems": true,
                      "items" : {
                           "ref": "#/definitions/identifyBy"
                       }
                  },
                  "end": {
                        "type": "string",
                        "description": "resulting state"
					        },
                  "isSuccess": {
							             "type": "boolean",
                           "description": "Is this a successful response to the action"
					        }
           },
           "patternProperties": {
 							"^x-": {
 							"$ref": "#/definitions/vendorExtension"
 					      }
 			     }
 		    },
        "vendorExtension": {
            "description": "Any property starting with x- is valid.",
            "additionalProperties": true,
            "additionalItems": true
        }
    }
}
